// 统一枚举值
// 1.数据类型: string, byte, short, integer, long, float, double, boolean, date, array, list, map, 每种类型会有自己的默认初始值(和java的标准一致)
// 2.参数范围: 1(输入参数), 2(输出参数), 3(全局参数), 4(可传递参数, 在本地配置中), 5(本地参数), 参数的范围从大到小排序为: 1=2>3>4>5

{
	// 基本配置
	"name":"", // 业务流名称(英文), 必填, 全局唯一
	"description":"", // 业务流描述, 默认为null
	"version":"1", // 版本控制, 默认为1
	"state":1, // 业务流状态, 1启用(最新版本的业务流状态值), 0停用(可以通过指定版本号使用该状态的业务流, 旧业务流版本的默认状态), 2禁用(无法使用业务流, 该状态必须专门设置)
	
	// 参数配置
	"params":[{ // 输入参数数组, 默认为空数组
		"name":"", // 参数名(英文)
		"description":"", // 参数描述, 默认为null
		"scope":1, // 参数范围, 这里不用配置, 直接使用1做为固定值
		"dataType":"string", // 参数数据类型, 默认为string
		"length":0, // 参数长度, 0表示不限制长度, 用作数据验证, 默认为0
		"precision":0, // 参数精度, 0表示不限制长度, 用作数据验证, 默认为0
		"defaultValue":"", // 参数默认值, 默认为null
		"required":true // 参数是否必须, 默认为true
	}],
	
	// 事件配置
	"events":[{ // 业务流包含的所有事件
		"name":"", // 事件名称(英文), 必填, 该业务流唯一
		"description":"", // 事件描述, 默认为null
		"actions":[{ // 事件包含的动作, 按顺序执行
			"type":"", // 动作的类型, 以"类型前缀_描述"的命名规则定义
			"content":{}, // 动作具体要执行的内容
			"result":{ // 动作执行的结果, 可以没有返回结果, 默认为null
				"isDeclare":true, // 是否定义变量, 默认为true; true表示创建一个新的变量存储结果, false表示从指定的scope获取指定name的变量存储结果(即赋值)
				"name":"", // 结果的(参数)名称, 默认为32位UUID
				"scope":5, // 结果的(参数)范围, 默认为5
				"dataType":"", // 结果的数据类型
			}
		}]
	}],
	
	// 流配置
	"flows":[{ // 业务流包含的所有流
		"description":"", // 流描述, 默认为null
		"type":1, // 流类型, 1顺序流, 2单条件流(if-else), 3多条件流(if-elsif-else), 默认为1, 在配置了条件流后, 如果没有配置else, 则提供一个默认的end-else结束流程
		"order":1, // 排序值, 默认为1, 当是条件流时, 如果配置了order值, 则根据order值的顺序, 从大到小依次判断, 碰到判断为true的, 进入到相应的targetEvent, 否则就按照json中配置的顺序依次判断
		"sourceEvent":"", // 起始的事件名 event.name
		"targetEvent":"", // 目标的事件名 event.name
		"conditionGroups":[{ // 判断条件组, 默认为空数组, 空数组标识判断结果默认为true
			"conditions":[{ // 条件
				"type":"",
				"content":{},
				"result":{
					"name":"",
					"scope":5,
					"dataType":"boolean" // condition这里, dataType就只能是boolean类型
				},
				"nextLogicOp":"and" // 与下一个条件连接的逻辑操作符, and, or, 默认为and
			}],
			"nextLogicOp":"and" // 与下一个条件连接的逻辑操作符, and, or, 默认为and
		}],
	}]
}