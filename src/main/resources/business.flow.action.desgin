// 业务流中基础的action的配置设计

-----------------------------------------------------------
// sql
// sql查询, sql增删改都是相同的配置方式
{
	"type":"sql_query", 
	"content":{
		"name":"", // 配置的sql名称
		"params":[{ // 传入要使用的参数配置
			"name":"",
			"scope":1
		}]
	},
	"result":{
		"name":"users",
		"scope":5,
		"dataType":"list"
	}
}

-----------------------------------------------------------
// func, 函数
// 判断
{
	"type":"func_switch", 
	"content":[{ // 每一组条件和其要执行的动作, 按照配置的顺序判断下去, 遇到符合条件的, 以后的都不会执行
		"conditionGroups":[{}],
		"actions":[{}]
	}]
}

// 循环
{
	"type":"func_loop", 
	"content":{
		"name":"", // 要操作的集合名称
		"scope":4, // 操作集合所在的范围
		"alias":"", // 别名*
		"actions":[{}] // 循环中要执行的动作
	}
}

// 使用方法
{
	"type":"func_method",
	"content":{
		"methodName":"", // 要使用方法的方法名
		"params":[{ // 要使用方法, 传入其相应的参数
			"name":"", // 参数名(当前业务流中)
			"scope":1 // 参数所在的范围(当前业务流中)
		}],
		
		// receives和receiveAll可以共存
		"receives":[{ // 接收方法返回的数据
			"returnName":"", 方法返回值中的参数名, 如果方法中只返回了一个参数(不是map), 则可以不配置该属性值
			"name":"", // 参数名(和result中的含义一致), 将returnName的值赋给当前业务流中, 指定范围中指定name的参数
			"scope":1 // 参数所在的范围(和result中的含义一致)
		}],
		"receiveAll":{ // 表示将返回的数据全部赋给一个参数
			"excludeNames":["", ""], // 排除这些名称的参数不接收
			"name":"",
			"scope":1
		}
	}
}

-----------------------------------------------------------
// data_op, 数据操作
// 比较 
{
	"type":"data_op_compare", 
	"content":{
		"op":"eq", // eq(等于), ne(不等于), gt(大于), ge(大于等于), lt(小于), le(小于等于), bool(表示left的结果就是boolean类型), 如果在这些操作符前加上!, 表示反向判断, 例如!eq
		"left":{
			"value":"", // 固定值
			
			"name":"", // 参数名
			"scope":4, // 参数范围, 从指定的范围获取指定参数名的值
			
			"action":{ // 执行action, 从其result中获取相应的值进行比较, 本质和method的receive是相同的
				"actions":[{}], 
				"actionResultPick":{
					"all":false, // 是否获取全部result, 默认false
					"names":["", ""], // pickAll=false时, 拾取指定name的result进行比较
					"excludeNames":["", ""] // pickAll=false时, 排除这些名称的result不拾取, 拾取其他的result进行比较
				}
			},
			
			"method":{ // 执行method
				// 和type=func_method的content中的配置一致, 用最后receive的值进行比较
			}
		},
		"right":{
			// 配置内容和left相同, 如果left的结果就是boolean, 则可以不配置right
			// 同样, 如果op=bool, 则忽略right
		}
	}
}

// 运算操作
{
	"type":"data_op_arithmetic",
	"content":[{
		// 这几种配置方式, 同data_op_compare中的配置一致
		"value":"",
		"name":"",
		"scope":4,
		"action":{},
		"method":{},
		
		// group和上面的配置是互斥的, group的优先级高于上面
		"group":[{ // 表示使用()括起来的运算操作
			// 这里的配置和上面的配置一致
		}],
		
		"op":"add"  // 运算符, add(加), sub(减), mul(乘), div(除), mod(取余), 用来和下一个操作数连接, 如果后面再没有配置, 则这块的配置无效
	}],
	"result":{
		// 这里可将计算结果赋给指定的参数
	}
}

-----------------------------------------------------------
// param_op, 参数操作
// 声明参数
{
	"type":"param_op_declare", 
	"content":[{
		"name":"", // 参数名
		"description":"", // 参数描述, 默认为null
		"scope":5, // 参数范围, 默认为5
		"dataType":"string", // 参数数据类型, 默认为string
		
		// value的优先级高于refParamName			
		"value":"", // 参数初始值
		
		// 将范围中其他参数的值赋给当前参数
		"refParamName":"xx", // 参数名
		"refParamScope":4 // 参数范围, 从指定的范围获取指定参数名的值
		
		// 不设计从method或action中赋值给当前参数, 如有需要, 通过使用action的result或func_method的receive声明并给参数赋值
	}]
}