// 业务流中sql(主要为content中)的配置设计
// 统一说明
// 1.参数名(paramName)也遵循业务流规则, 可以通过使用xxx.xx形式获取值
// 2.固定值, 同样符合业务流配置中统一说明的固定值

// insert
{
	"table":{ // 给哪个表插入数据
		"name":""
	}, 
	"columns":["", ""], // 要插入得列名
	
	"valuesType":0, // values的类型, 0表示值插入, 1表示子查询插入
	"values":[{ // 值插入
		// 优先级排序: column > value > paramName > function > select
		"column":"", // 列名, 在insert中不使用, 在其他地方会使用
		
		"value":"", // 固定值
		
		"paramName":"", // 从sql中配置的参数params获取指定的参数值
		"placeholder":true, // 是否使用占位符, 默认为true
		
		// 是否包裹固定值, 0未配置, 1包裹, 2不包裹
		// => 针对value
		// 首先判断如果value是数字类型, 则package默认为2, 否则package默认为1, 再判断用户是否配置了该属性值, 如果配置了则使用用户配置的值, 否则使用默认值
		// => 针对paramName
		// placeholder=false才有效
		// 首先判断如果paramName对应的值是数字类型, 则package默认为2, 否则package默认为1, 再判断用户是否配置了该属性值, 如果配置了则使用用户配置的值, 否则使用默认值
		"package":0,
		
		"function":{ // 函数
			"name":"", // 函数名
			"values":[{ // 函数传入的参数
				... // 与上一层的values配置一致
			}]
		},
		
		"selects":[{ // 查询获取一个值
			... // 具体的配置参看select中的selects
		}]
	}]
	或
	"values":[{ // 查询插入, 具体的配置参看select中的selects
		... 
	}]
		
	
}

// delete
{
	"table":{ // 删除哪个表的数据
		"name":""
	}, 
	"whereGroups":[{}] // 条件组, 具体的配置参看select
}

// update
{
	"table":{ // 修改哪个表的数据
		"name":""
	}, 
	"sets":[{
		... // 配置的具体信息参看insert的values配置
	}],
	"whereGroups":[{}] // 条件组, 具体的配置参看select
}

// select
{
	"withs":[{ // with字句, 非必须配置
		"alias":"", // 对with查询定义的别名,
		"selects":[{}] // 具体的查询语句
	}],
	"selects":[{
		"results":[{ // 查询结果集, 即列名的配置
			// 优先级排序: column > value > paramName > function > select
			"alias":"", // 别名
			
			// 配置和insert的values中的配置相同, 具体信息参看insert的values配置
			"column":"", // 列名
			"value":"", 
			"paramName":"",
			"placeholder":true,
			"package":0,
			"function":{
				"name":"",
				"values":[{}]
			},
			"selects":[{}]
		}],
		"table":{
			// 优先级排序: name > paramName > function > select
			"alias":"", // 别名
			"name":"", // 表名
			
			"paramName":"", // 指定参数名的数据, 例如该参数名存储的是一个表名, 实现动态表名的功能
			
			"function":{}, // 参看insert的values中的function配置
			
			"selects":[{}] // 子查询, 具体的配置参看select中的selects
		},
		"joins":[{ // join
			"type":0, // 0.inner join, 1.left join, 2.right join, 3.full join
			
			// 以下配置的具体信息参看selects的table配置
			"table":{},
			"onGroups":[{ // on条件
				// 参看select中whereGroups中的配置
			}]
		}],
		"whereGroups":[{ // where
			"conditions":[{
				"left":{ // 主要是列的信息
					// 参考insert的values中的value配置
				},
				"rights":[{ // 之所以是数组, 是为了满足btn, in这种会有多个值的比较
					//参考insert的values中的value配置
				}],
				"cop":"", // eq(等于), ne(不等于), gt(大于), ge(大于等于), lt(小于), le(小于等于), btn(在之间), in(包含), like(包含), null(是否为null), 如果在这些操作符前面加上!, 表示反向判断, 例如!eq, 如果是null或!null, 则rights失效
				"op":0 // 与下一个条件连接的逻辑操作符, 0.and, 1.or, 默认为0
			}],
			"op":0
		}],
		"groupBys":[{ // group by
			"column":"", // 列名
			"function":{} // 参看selects的results中的function配置
		}],
		"havingGroups":[{ // having
			// 参看select中whereGroups中的配置
		}],
		"orderBys":[{ // order by
			// 优先级排序: column > function
			"column":"", // 列名
			"function":{}, // 参看selects的results中的function配置
			"sort":0 // 排序方式, 0为asc, 1为desc, 默认为0
		}],
		"union":0 // 是否union, 默认为0, 0表示union, 1表示union all, 如果之下再没有配置select, 则该项配置无效
	}]
}
